
plugins {
	id 'com.android.application'
	id 'kotlin-android'
	id 'kotlin-kapt'
	id('dagger.hilt.android.plugin')
}

//apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'

// Inside each module using kotlin
//plugins {
//	id 'kotlin-android'
//}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
// Load your keystore.properties file into the keystoreProperties object.
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
	compileSdkVersion 32

	defaultConfig {
		applicationId "me.gabeg.sicksends"
		minSdkVersion 21
		targetSdkVersion 32
		versionCode 1
		versionName "0.0.0"

		javaCompileOptions {
			annotationProcessorOptions {
				arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
			}
		}
	}

	signingConfigs {
		release {
			keyAlias keystoreProperties['keyAlias']
			keyPassword keystoreProperties['keyPassword']
			storeFile file(keystoreProperties['storeFile'])
			storePassword keystoreProperties['storePassword']
		}
	}

	buildTypes {
		release {
			signingConfig signingConfigs.release
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}

		innerTest {
			matchingFallbacks = ['debug', 'release']
		}
	}

	buildFeatures {
		compose true
	}

	compileOptions {
		// Flag to enable support for the new language APIs
		// Error: coreLibraryDesugaring configuration contains no dependencies.
		// If you intend to enable core library desugaring, please add dependencies
		// to coreLibraryDesugaring configuration
		// coreLibraryDesugaringEnabled true

		// Sets Java compatibility to Java 8
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	kotlinOptions {
		jvmTarget = "1.8"
	}

	composeOptions {
		kotlinCompilerExtensionVersion = "1.2.0"
	}

	lint {
		disable 'UnnecessaryInterfaceModifier'
		enable 'ConvertToWebp', 'DalvikOverride', 'DuplicateStrings', 'IconExpectedSize', 'MinSdkTooLow', 'MissingRegistered', 'NegativeMargin', 'Registered', 'TypographyQuotes'
	}
    namespace 'me.gabeg.sicksends'

    applicationVariants.all { variant ->
		variant.resValue "string", "versionName", variant.versionName
	}

}

repositories {
	mavenCentral()

	maven {
		url "https://jitpack.io"
	}

	//flatDir {
	//	dirs 'libs'
	//}
}

dependencies {

	implementation('com.google.android.material:material:1.6.1')

	//implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

	// UI alignment, modifiers, etc.
	implementation("androidx.compose.ui:ui:1.1.1")

	// Tooling support (Previews, etc.)
	implementation("androidx.compose.ui:ui-tooling:1.1.1")
	implementation("androidx.compose.ui:ui-tooling-preview:1.1.1")
	//debugImplementation "androidx.compose.ui:ui-tooling:1.1.1"

	// Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
	implementation("androidx.compose.foundation:foundation:1.1.1")
	// Material Design
	implementation("androidx.compose.material:material:1.1.1")
	// Material design icons
	//implementation("androidx.compose.material:material-icons-core:1.1.1")
	//implementation("androidx.compose.material:material-icons-extended:1.1.1")

	// Navigation Compose
	implementation("androidx.navigation:navigation-compose:2.5.0")
	implementation("androidx.constraintlayout:constraintlayout-compose:1.0.1")

	// Pager and Indicators - Accompanist
	implementation("com.google.accompanist:accompanist-pager:0.24.2-alpha")
	implementation("com.google.accompanist:accompanist-pager-indicators:0.24.2-alpha")
	implementation("com.google.accompanist:accompanist-flowlayout:0.24.8-beta")

	// UI Tests
	//androidTestImplementation("androidx.compose.ui:ui-test-junit4:1.1.1")

	// Compose
	implementation('androidx.activity:activity-compose:1.5.0')

	// Datastore
	implementation("androidx.datastore:datastore-preferences:1.0.0")

	// Convert State to LiveData via observeAsState
	implementation("androidx.compose.runtime:runtime-livedata:1.1.1")
	// Do I need this? It seems like I don't since mutableStateOf and stuff works
	//implementation("androidx.compose.runtime:runtime:1.1.1")

	// Lifecycle and ViewModel
	implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.5.0")
	//implementation 'androidx.lifecycle:lifecycle-process:2.4.1'
	implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.0-alpha01")
	implementation('androidx.lifecycle:lifecycle-viewmodel-compose:2.5.0')

    // Kotlin
	implementation("androidx.core:core-ktx:1.8.0")
	implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")

	// Room
	implementation("androidx.room:room-ktx:$roomVersion")
	implementation("androidx.room:room-runtime:$roomVersion")
	annotationProcessor("androidx.room:room-compiler:$roomVersion")
	kapt("androidx.room:room-compiler:$roomVersion")

	// Dagger
	implementation("com.google.dagger:hilt-android:$daggerVersion")
	kapt("com.google.dagger:hilt-compiler:$daggerVersion")

	// Hilt
	kapt("androidx.hilt:hilt-compiler:$hiltVersion")
	implementation("androidx.hilt:hilt-navigation-compose:$hiltVersion")


}
